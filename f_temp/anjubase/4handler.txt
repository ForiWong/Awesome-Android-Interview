1、Handler用于解决线程间的通信： 在后台线程进行耗时处理后（不能在子线程进行更新UI），得到的结果要发送到UI线程进行更新，就需要使用Handler。
不但是开发者使用Handler用来与UI线程的通信，在android系统中，子线程与UI线程的交互一样是使用Handler机制的。

还可以延伸，为什么只能UI线程更新UI。
如果多个线程同时对同一个UI控件进行更新，容易发生不可控的错误！
那么怎么解决这种线程安全问题？
最简单的，加锁，不是加一个，是每层都要加锁（用户代码→GUI顶层→GUI底层…），这样也以为着 耗时，UI更新效率变低；如果每层共用同一把锁，那就是单线程了。
Android没有采用「线程锁」，而是采用「单线程消息队列机制」，实现一个「伪锁」。

2、（1）在UI线程创建一个Handler对象，需要重写handleMessage(Message msg)方法；
（2）在子线程中，通过这个handler对象发送message：sendMessage(msg);
（3）需要传递的数据给Message：
	可以post(Runnable),其实就是使用下面这个方法；
	sendMessage(Message)；
	通过obtainMessage()获取Message； //一个消息池，复用对象。（享元模式）
	......

3、UI线程出初始化时创建了Looper和Message队列，
而，子线程中需要自己来初始化：
Looper.prepare();
//....
Looper.loop();

4、使用Handler导致内存泄露的解决方法
方法一：通过程序逻辑来进行保护。
1.退出Activity的时候停掉你的后台线程。
2.如果你的Handler是被delay的Message持有了引用，那么使用相应的Handler的removeCallbacks()方法，把消息对象从消息队列移除就行了。
方法二：将Handler声明为静态类 + 弱引用。
弱引用就是在JVM进行GC时，发现这个弱引用对象，就会把它回收。
实际上，方法二，子线程还是可能会在运行，只是任务结束后，获取Activity时，发现被回收了。
所以，最好的办法还是既然你退出了，就应该将子线程的任务结束。
方法二只能算是个兜底策略。

5、Android在子线程更新UI的最常见的五种方式
（1）runOnUiThread(new Runnable());
（2）handler.post(new Runnable());
（3）handler.sendMessage();
（4）view.post(new Runnable());
（5）view.postDelayed(new Runnable(), long);

6、注意的API
//避免内存泄露的方法：    
//移除标记为0x1的消息        
new Handler().removeMessages(0x1);    
//移除回调的消息        
new Handler().removeCallbacks(Runnable);    
//移除回调和所有message        
new Handler().removeCallbacksAndMessages(null);

7、Handler机制解析
Handler 负责消息创建、发送消息和处理消息
Message 是消息的实体。
MessageQueue 消息队列。
Looper 负责消息队列的循环，包括两件事：第一创建和控制 MessageQueue；第二轮询MessageQueue读取Message信息派发给Handler

（1）Looper对象不需要开发人员去初始化，在每个线程里面他是存在的。通过Looper.prepare()将线程与Looper绑定，也和MessageQueue消息队列一对一绑定了。
（2）而在Handler初始化时，和自己所在的线程的MessageQueue绑定。
 所以，Handler对象可以跨线程，它在子线程中将Message推入MessageQueue中。
（3）Looper发现MessageQueue有Message，于是获取该Message相应的Handler，并将Messager给Handler处理。
其实，在handler对象所在的线程，运行在loop()方法中，这是一个无限的死循环，从MessageQueue里面读取Message，如果消息暂时不被读取会被阻塞。
//如果消息队列为空，就是执行被阻塞，主线程会释放CPU资源进入休眠状态；当有下一个消息达到是时候，会唤醒主线程开始工作。
