1、android屏幕碎片化严重，所以需要屏幕适配。
原因：andorid设备碎片化，导致APP的界面元素在不同屏幕尺寸上显示不一致。
比如，屏幕尺寸不一样，屏幕密度不一样，厂商不一样，也是碎片化，比如刘海屏、水滴屏等等。
目的：让布局、布局组件，资源，用户界面流程，匹配不同屏幕尺寸。

2、屏幕适配的常见方式：
（1）布局适配
避免写死控件尺寸，使用wrap_content，match_parent
使用占比：LinearLayout  xxx:layout_weight = “0.5”
使用RelativeLayout xxx：layout_centerParent=”true”等
约束布局，比相对布局性能好，ContraintLayout
百分比布局：Percent-support-lib xxx:layout_widthPercent=”30%”
（2）图片资源适配
.9图或者SVG图片实现缩放，不会失真
备用位图匹配不同分辨率
（3）用户流程适配
根据业务逻辑执行不同的跳转逻辑
根据别名展示不同的界面。比如使用fragment 在平板
（4）限定符适配
分辨率限定符 drawable-hdpi  -xdpi
尺寸限定符 layout-small,layout-large
最小宽度限定符values-sw360dp
屏幕方向限定符layout-land, layout-port 横屏、竖屏

3、方案
（1）限定符适配
优势：使用简单，无需要开发者手动指定；
google推荐使用方式，有系统自己判断；
适配通过不同的xml布局完成，不需在代码中额外再写。
app会根据当前手机的分辨率自动选择对应的dimens.xml
劣势：
增加apk大小，适配机型越多的话，需要的xml也就越多；
适配所有机型的分辨率，xml文件加起来有近3M的大小；
不能适配奇葩机型，如手表。
其实：也是增加了UI设计稿的问题啊，这些不同屏幕大小的尺寸还是要UI设计的。

（1-1）smallestWidth 限定符适配方案
使用 sw<N>dp限定符，即 smallestWidth（最小宽度） 限定符来进行适配。
这个方案的关键：自动生成一堆 dimens.xml 文件。
1）以设计图最小宽度（单位为 dp）作为基准值，利用插件生成所有设备对应的 dimens.xml 文件。
 Android Studio 中安装 ScreenMatch 插件。
2）在项目的默认 values 文件夹中需要一份 dimens.xml 文件；
然后执行插件， res 目录下会自动生成一堆 dimens.xml 文件。
3）根据设计图标注，标注多少 dp，布局中就写多少dp，格式为@dimen/dp_XX。
比如，在values-sw360dp.xml中， @dimen/dp_180就是180dp;
而在 values-sw640dp.xml中， @dimen/dp_180就是320dp;
4）目前市面上的屏幕适配方案只能以宽或高一个维度去适配，另一个方向用滑动或权重的方式去适配的原因。

（2）百分比适配
优势：通过百分比定义宽度、高度，比较方便；
彻底抛弃px、dp单位，通过百分比实现，可以在布局完成适配。
对开发者工作量少。
缺点：就是所有的容器控件只能用它提供的PercentXXXLayout等
基本上淘汰了。

（3）代码动态适配
对代码的侵入性强。
但是与UI效果一致性比较好。
这个方式也方式，也是网易云音乐2017之前使用的屏幕适配，现在不建议采用。
 	需要自定义布局控件，重写onMeasure方法，即测量的时候动态计算尺寸。
 	1）根据当前的屏幕尺寸和UI设计稿尺寸计算缩放比例；
 	2） 在onMeasure()遍历所有的子view,对布局属性LayoutParams中的所有属性进行缩放。
 * 这个方式比较苦逼，每种布局容器都要进行自定义。
 * 容器内的容器还是需要自定义
 * 对自定义控件没法进行适配
 *  好处：就是和UI设计稿可以直接无缝对接，直接使用px
 
（4）修改像素密度
density：一般，每英寸屏幕上有160个像素点，如果当前的屏幕是320个像素点，则density=2。
scaleDensity：字体缩放比率，一般与density一致。
densityDpi：表示每一英寸屏幕有的像素点数量。
直接更改系统内部对于目标尺寸而言的像素密度。

今日头条屏幕适配方案是通过修改系统的density,使每个view的宽度或者高度,占屏幕的百分比与最初设计开发时一致.来达到适配效果

4、刘海屏适配
（1）如果是非全屏，即有状态栏，状态栏高度刚好是刘海高度，不需要适配。
（2）所以全屏情况就需要适配：
A.设置全屏
B. 1.判断手机厂商， 2，判断手机是否刘海， 3，设置是否让内容区域延伸进刘海 4，设置控件是否避开刘海区域  5， 获取刘海的高度
C. 让内容区域延伸进刘海,设置成沉浸式
D. 最后，让我们页面的容器布局下移状态栏高度的距离。
   
