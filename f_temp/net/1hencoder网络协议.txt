1、HTTP 的定义：Hypertext Transfer Protocol，超文本传输协议，和 HTML (Hypertext Markup Language 超⽂本标记语言) 一起诞生，用于在网络上请求和传输 HTML 内容。超文本，即「扩展型文本」，指的是 HTML 中可以有链向别的文本的链接（hyperlink）。

2、（1）URL 格式，由三部分：协议类型、服务器地址(和端口号)、路径(Path)
协议类型://服务器地址[:端口号]路径
http://hencoder.com/users?gender=male
（2）请求报文：请求行、请求头、请求体。
（3）响应报文：状态行、响应头、响应体。

3、请求方法
（1）GET：用于获取资源，对服务器数据不进行修改，不发送Body
（2）POST：用于增加或修改资源，发送给服务器的内容写在Body中
（3）PUT：用于修改资源，发送给服务器的内容写在Body中
注：post不具幂等性，put具幂等性。幂等性是指无论调用多少次，都是实现相同的结果。
（4）DELETE：用于删除资源，不发送 Body
（5）HEAD：和 GET 用法完全相同
和 GET 唯一区别在于，返回的响应中没有 Body
head响应中没有body，但是有head。所以，可以用来获取一些信息，比如获取下载文件的大小，之后根据文件大小，就可以选择一次下载还是断点续传。

4、GET与POST
•GET在浏览器回退时是无害的，而POST会再次提交请求。
•GET产生的URL地址可以被Bookmark，而POST不可以。
•GET请求会被浏览器主动cache，而POST不会，除非手动设置。
•GET请求只能进行url编码，而POST支持多种编码方式。
•GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。
•GET请求在URL中传送的参数是有长度限制的，而POST么有。
•对参数的数据类型，GET只接受ASCII字符，而POST没有限制。
•GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。
•GET参数通过URL传递，POST放在Request body中。
HTTP的底层是TCP/IP。所以GET和POST的底层也是TCP/IP，也就是说，GET/POST都是TCP链接。GET和POST能做的事情是一样一样的。你要给GET加上request body，给POST带上url参数，技术上是完全行的通的。HTTP只是个行为准则，而TCP才是GET和POST怎么实现的基本。就是说，你可以不按套路来，但是人家浏览器不一定会帮你解析这些数据。
GET和POST还有一个重大区别，简单的说：
GET产生一个TCP数据包；POST产生两个TCP数据包。
长的说：
对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；
而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。

5、Status Code 状态码
三位数字，用于对响应结果做出类型化描述（如「获取成功」「内容未找到」）。
1xx：临时性消息。如：100 （继续发送）、101（正在切换协议）
2xx：成功。最典型的是 200（OK）、201（创建成功）。
3xx：重定向。如 301（永久移动）、302（暂时移动）、304（内容未改变）。
4xx：客户端错误。如 400（客户端请求错误）、401（认证失败）、403（被禁止）、404（找不到内容）。
5xx：服务器错误。如 500（服务器内部错误）

200：请求被正常处理
204：请求被受理但没有资源可以返回
206：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。
301：永久性重定向
302：临时重定向
303：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上
304：发送附带条件的请求时，条件不满足时返回，与重定向无关
307：临时重定向，与302类似，只是强制要求使用POST方法
400：请求报文语法有误，服务器无法识别
401：请求需要认证
403：请求的对应资源禁止被访问
404：服务器无法找到对应资源
500：服务器内部错误
503：服务器正忙

6、Hash
定义：把任意数据转换成指定范围的数据。
作用：相当于从数据中提出摘要信息，因此最主要用途是数字指纹。
（1）Hash 的实际用途：唯一性验证
例如 Java 中的 hashCode()用法。
（2）Hash 的实际用途：数据完整性验证，判断下载文件的完整性。
（3）Hash 的实际用途：快速查找，如HashMap。
（4）Hash 的实际用途：隐私保护，比如只保存密码的Hash值，而不是原文本。

7、TCP/IP协议族
TCP/IP协议族是一系列协议所组成的一个络分层模型。
Application Layer 应用层：HTTP、FTP、DNS
Transport Layer 传输层：TCP、UDP
Internet Layer 网络层：IP
Link Layer 数据链路层：以太网、WiFi

网络的不稳定 --> 在每个节点都可能出现问题
--> 重传机制 --> 减少丢包的问题  -->  将数据切块，分块传输
--> 有分块传输就要分层。

分层就是相当于接口编程，不能的层级对传输数据中发挥不同的作用。

（1）应用层，就是做实事的。
HTTP 超文本传输协议
FTP 传文件
DNS 域名服务
这些都有分块传输的需求。--> 抽取接口

（2）传输层有TCP、UDP。

（3）TCP、UDP继续抽取 --> 都有网络传输需求（IP层）--> 即单纯的一个一个数据发出去、接收数据。

（4）数据链路层：比如以太网、WIFI，就是各种物理设备的沟通接口。就是抽取出实质物理世界的支持。

8、TCP连接的建立是在传输层，只有建立后才会开始应用层的收发消息。
三次握手  --> TCP连接建立
1）连接方主动发个消息（tcp消息）给接收方：我要给你发消息了。
2）接收方给连接方发消息：知道了；我也要给你发消息了。
3）连接方再给接收方发消息：我知道了，你要给我发消息了。
双方 通知 -- 确认。
确认双方都有发消息和收消息的能力。

9、TCP连接为什么要关闭？ 省资源。
关闭也是要通知对方的。四次挥手：
A -->B  1） 我没有消息给你发了。
B --> A  2）知道了，你没有消息给我发了。
B --> A  3）我也没有消息给你发了。
A -->B  4） 知道了，你也没有消息给我发了。
连接就关闭了。

10、HTTPS
定义：HTTP over SSL 的简称，即当作在 SSL （或 TLS）上的 HTTP。说白了就是加密通信的 HTTP。
原理：在客户端和服务器之间协商出一套对称密钥，每次发送信息之前将内容加密，收到之后解密，达到内容的加密传输。
为什么不直接非对称加密？
非对称加密由于使用了复杂了数学原理，因此计算相当复杂，如果完全使用对称加密来加密通信内容，会严重影响网络通信的性能。

在HTTP之下增加的一个安全层，用于保障HTTP的加密传输。
本质：在客户端和服务端之间用非对称加密协商出一套对称密钥，每次发送信息之前将内容加密，收到之后解密，达到内容的加密传输。
非对称加密性能差，太慢了，所以只是在初始协商密钥时使用。

HTTP将报文交给TLS去发，加密后，交给TCP去发…………同理，TCP收到分段消息是交给TLS进行解密，再给HTTP。


