1、逐帧动画的原理就是让一系列的静态图片依次播放。
帧动画需要指定：是否一直循环oneshot、每帧的时间。
（1）可以利用 xml 实现逐帧动画。在 <animation-list .../> 标签下使用 <item .../>子元素标签定义动画的全部帧，并指定各帧的持续时间。
android:oneshot控制该动画是否循环播放。如果为true，动画将不会循环播放，否则该动画将会循环播放。
在xml布局中，将这个animation-list设置给控件的background。

frame_image = findViewById(R.id.frame_image);
// 获取 AnimationDrawable 对象
animationDrawable = (AnimationDrawable) frame_image.getBackground();
animationDrawable.start();
animationDrawable.stop();

（2）通过代码创建帧动画
animationDrawable = new AnimationDrawable();
animationDrawable.addFrame(drawable, 100); //添加帧
一样设置给控件，就可以开始/停止了。

2、补间动画就是指开发者指定动画的开始、动画的结束的"关键帧"，而动画变化的"中间帧"由系统计算，并补齐。
需要指定：开始的属性值、结束的属性值、插值器、时间。
补间动画有四种：
淡入淡出： alpha
位移：translate
缩放：scale
旋转： rotate
（1）通过xml的补间动画，可以多个动画组合
       // AnimationUtils 加载动画资源
        final Animation anim = AnimationUtils.loadAnimation(this,R.anim.tween_anim);
        tween_image.startAnimation(anim);
        interpolator 代表插值器，主要作用是可以控制动画的变化速率。

（2）java代码实现补间动画
TranslateAnimation translateAnimation = new TranslateAnimation(0，500，0，500);//开始、结束的属性值
translateAnimation.setDuration(3000);
mButton.startAnimation(translateAnimation);

Animation scaleAnimation= new ScaleAnimation(0,2,0,2,Animation.RELATIVE_TO_SELF,0.5f,Animation.RELATIVE_TO_SELF,0.5f);
scaleAnimation.setDuration(3000);
mButton.startAnimation(scaleAnimation);

（3）动画监听器：开始、结束、重复、取消
为了实现一些需求，如动画结束后开始另一个动画或者页面跳转，这时候就需要监听动画。
Animation.addListener(new AnimatorListener() {
	  @Override
	  public void onAnimationStart(Animation animation) {
		  //动画开始时执行
	  }

	   @Override
	  public void onAnimationRepeat(Animation animation) {
		  //动画重复时执行
	  }

	 @Override
	  public void onAnimationCancel()(Animation animation) {
		  //动画取消时执行
	  }

	  @Override
	  public void onAnimationEnd(Animation animation) {
		  //动画结束时执行
	  }
   });
	  
3、属性动画可以看作是增强版的补间动画，与补间动画的不同之处体现在：
补间动画只能定义两个关键帧在透明、旋转、位移和倾斜这四个属性的变换，但是属性动画可以定义任何属性的变化。
补间动画只能对 UI 组件执行动画，但属性动画可以对任何对象执行动画。
与补间动画类似的是，属性动画也需要定义几个方面的属性：
动画持续时间。默认为 300ms，可以通过 android:duration 属性指定。
动画插值方式。通过 android:interploator 指定。
动画重复次数。通过 android:repeatCount 指定。
重复行为。通过 android:repeatMode 指定。
动画集。在属性资源文件中通过 <set .../> 来组合。
帧刷新率。指定多长时间播放一帧。默认为 10 ms。

Animator: 提供创建属性动画的基类，基本不会直接使用这个类。
ValueAnimator:属性动画用到的主要的时间引擎，负责计算各个帧的属性值。
ObjectAnimator： ValueAnimator 的子类，对指定对象的属性执行动画。
AnimatorSet：Animator 的子类，用于组合多个 Animator。

除了这些 API,属性动画还提供了一个 Evaluator ，用来控制属性动画如何计算属性值。
IntEvaluator:计算 int 类型属性值的计算器。
FloatEvaluator: 用于计算 float 类型属性值的计算器。
ArgbEvaluator: 用于计算十六进制形式表示的颜色值的计算器。
TypeEvaluator: 可以自定义计算器。

属性动画的一般使用：
定义属性动画和补间动画等类似，有两种方式：
a.使用 ValueAnimator 或者 ObjectAnimator 的静态工厂方法创建动画。
b.使用资源文件来定义动画。

属性动画的使用：
创建 ValueAnimator 或 ObjectAnimator 对象 —— 即可以从 XML 资源文件加载该动画也可以直接调用 ValueAnimator 或者 ObjectAnimator 的静态工厂方法创建动画。
根据需要为 Animator 对象设置属性。
如果需要监听 Animator 的动画开始事件，动画结束事件、动画重复事件、动画值改变事件，并根据事件提供响应处理代码，需要为Animator 对象设置监听器。
如果有多个动画需要同时播放，需要使用 AnimatorSet 组合这些动画。
调用 Animator 对象的 start 启动动画。

ObjectAnimator anim = ObjectAnimator.ofFloat(myView, "rotation", 0f, 360f);
anim.setDuration(1000);
anim.start();

// imageView1:  //ViewPropertyAnimator
imageView1.animate()
        .translationX(500)
        .setDuration(500);

// imageView2: 
ObjectAnimator animator = ObjectAnimator.ofFloat(imageView2, "translationX", 500);
animator.setDuration(2000);
animator.start();

4、实现动画还可以通过自定义 View 的方式，但是自定义 View 有如下缺陷：
View 缺乏双缓冲机制；
当程序需要更新 View 上的图像时，程序必须重绘 View 上显示的整张图片。
新线程无法直接更新 View 组件。
因此，自定义 View 实现绘图不是很好的选择，尤其是游戏绘图时，性能不是很好。因此，Android提供了一个 SurfaceView 来代替 View。 比如，cocos2dx 打包的android游戏。

5、自定义的属性动画：使用ObjectAnimator 做属性动画，本质是是会调用属性名对应的setter方法。所以自定义控件需要写对应的方法。
ObjectAnimator
使用方式：
如果是自定义控件，需要添加 setter / getter 方法；
用 ObjectAnimator.ofXXX() 创建 ObjectAnimator 对象；
用 start() 方法执行动画。
public class SportsView extends View {
    float progress = 0;    
    ......

    // 创建 getter 方法
    public float getProgress() {
        return progress;
    }

    // 创建 setter 方法
    public void setProgress(float progress) {
        this.progress = progress;
        invalidate();
    }
    
    @Override
    public void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        ......
        
        canvas.drawArc(arcRectF, 135, progress * 2.7f, false, paint);
        ......
    }
}

......
// 创建 ObjectAnimator 对象
ObjectAnimator animator = ObjectAnimator.ofFloat(view, "progress", 0, 65);
// 执行动画
animator.start();

6、 setInterpolator(Interpolator interpolator) 设置 Interpolator 插值器

// imageView1: 线性 Interpolator，匀速
imageView1.animate()
        .translationX(500)
        .setInterpolator(new LinearInterpolator());

// imageView: 带施法前摇和回弹的 Interpolator
ObjectAnimator animator = ObjectAnimator.ofFloat(imageView2, "translationX", 500);
animator.setInterpolator(new AnticipateOvershootInterpolator());
animator.start();

AccelerateDecelerateInterpolator 先加速再减速。这是默认的 Interpolator。
LinearInterpolator匀速。
AccelerateInterpolator持续加速。
DecelerateInterpolator持续减速直到 0。
AnticipateInterpolator先回拉一下再进行正常动画轨迹。

7、TypeEvaluator 估值器
TypeEvaluator 最经典的用法是使用 ArgbEvaluator 来做颜色渐变的动画。
ObjectAnimator animator = ObjectAnimator.ofInt(view, "color", 0xffff0000, 0xff00ff00);
animator.setEvaluator(new ArgbEvaluator());
animator.start();
另外，在 Android 5.0 （API 21） 加入了新的方法 ofArgb()，所以如果你的 minSdk 大于或者等于 21，可以直接用下面这种方式：
ObjectAnimator animator = ObjectAnimator.ofArgb(view, "color", 0xffff0000, 0xff00ff00);
animator.start();

8、ofObject() 不限定类型的属性
借助于 TypeEvaluator，属性动画就可以通过 ofObject() 来对不限定类型的属性做动画了。方式很简单：
为目标属性写一个自定义的 TypeEvaluator
使用 ofObject() 来创建 Animator，并把自定义的 TypeEvaluator 作为参数填入。

9、插值器和估值器关系
属性动画是对属性做动画，属性要实现动画。
首先由插值器根据时间流逝的百分比计算出当前属性值改变的百分比，然后由插值器将这个百分比返回。这个时候插值器的工作就完成了。
插值器算好属性变化百分比之后，由估值器根据当前属性改变的百分比来计算改变后的属性值，根据这个属性值，我们就可以对View设置当前的属性值了。

// 插值器 Interpolator接口：时间进度 --> 动画进度百分比
public interface Interpolator {  
    // 内部只有一个方法
     float getInterpolation(float input) {  
         // 参数说明
         // input值值变化范围是0-1，且随着动画进度（0% - 100% ）均匀变化
        // 即动画开始时，input值 = 0；动画结束时input = 1
        // 而中间的值则是随着动画的进度（0% - 100%）在0到1之间均匀增加
        
      ...// 插值器的计算逻辑

      return xxx；//比如，匀速插值器，就是直接返回input
      // 返回的值就是用于估值器继续计算的fraction值，下面会详细说明
}  

//估值器：动画进度百分比 --> 属性值
public interface TypeEvaluator {  
    public Object evaluate(float fraction, Object startValue, Object endValue) {  
// 参数说明
// fraction：插值器getInterpolation（）的返回值
// startValue：动画的初始值
// endValue：动画的结束值

        ....// 估值器的计算逻辑

        return xxx；
        // 赋给动画属性的具体数值
        // 使用反射机制改变属性变化
// 特别注意
// 那么插值器的input值 和 估值器fraction有什么关系呢？
// 答：input的值决定了fraction的值：input值经过计算后传入到插值器的getInterpolation（），然后通过实现getInterpolation（）中的逻辑算法，根据input值来计算出一个返回值，而这个返回值就是fraction了
    }  
}

