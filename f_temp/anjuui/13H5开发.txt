android的原生控件与WebView进行混合开发。其实使用起来也是很简单，就一个WebView，外加本地的java代码与H5中的JavaScript进行交互。
涉及的内容包括：
（1）WebView加载H5页面；
（2）Android调用H5中的方法；
（3）H5调用Android中的方法；
（4）WebView确定速度测试、优化；（复用，而不是每次都重新启动。）
（5）H5分模块更新逻辑；（较少更新的代价、流量少，部分更新。）

（6）H5缓存使用的问题。（分为网页数据缓存和H5缓存，涉及缓存，必然就是要设置必要的网络、网络状态以及存储等权限，注意几种不同的缓存模式。）

（7）WebView的注意内存泄漏问题。（2种方法：a.不在xml布局中添加webView控件，而是通过动态加载，在onCreate()方法体中加载，之后在onDestroy()中注意销毁。 b.另起一个进程加载webview，页面销毁后干掉这个进程。使用起来就比较麻烦了，涉及进程间通信AIDL，另起进程会导致CPU占用，但是优点是回收处理的比较好。）

（8）Native App：本地应用程序（原生App）；Web App：网页应用程序（移动web）；Hybrid App：混合应用程序（混合App）。hybrid杂种的、混合的。
React Native App混合开发。

（9）内存泄漏：
(a)不在xml布局中添加webview标签，采用在代码中new出来的方式。
再接着当页面销毁时，调用一些各种各样webview提供的方法，回收资源，这种方式有一定的作用。但是，退出页面后，并不能完全降到之前的内存水平。
(b)另起一个进程加载webview，页面销毁后干掉这个进程。内存几乎回到跟进入前差不多的水平值。
 开启一个进程的方式：销毁内存的更干净。但是涉及到进程间通信，逻辑麻烦了；还有，还需要考虑进程被回收的可能性。
