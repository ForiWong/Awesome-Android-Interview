1、API设计
安全机制：调用者进行安全验证的方式；数据传输够不够安全。
接口协议标准化。
使用统一的命名规范，编程规范。
接口版本控制迭代，就是要解决接口的兼容性的问题，需要做好接口的版本控制。
面向接口编程。

2、框架分层
原则：低耦合高内聚。
简单的划分：数据管理、数据加工、数据展示。相应的三层架构：数据层、业务层、展示层。
数据层：缓存 + 网络API。（缓存策略设计的点：缓存数据保存的位置、缓存数据的有效时间。）
业务层：数据加工者，主要就是从数据层获取数据，然后经过业务逻辑处理后转化成展示层需要的数据。
展示层：作为数据展示者，它只要关心数据如何展示就可以了。
1）保持规范性：定义好开发规范，包括书写规范、命名规范、注释规范等，并按照规范严格执行；
2）保持单一性：布局就只做布局，内容就只做内容，各自分离好，每个方法、每个类，也只做一件事情；
3）保持简洁性：保持代码和结构的简洁，每个方法，每个类，每个包，每个文件，都不要塞太多代码或资源，感觉多了就应该拆分。

3、原生框架与混合框架：
用H5:非主要界面、改动较大的。
原生开发固然体验比较好，但是开发周期相对于网页通常比较长，对于混合开发模式；
1）一般情况下；从用户体验的角度出发；为了提高用户体验；一般本地的一级页面，以及改动量比较小的页面，需要做成原生的。
2）基于公司实际情况出发，经常变动版本；改动比较大的或者详情页面我们可以做成网页形式，便于我们版本迭代更新
3）复杂的软件必须有清晰合理的架构，否则无法后期扩展和维护；通常情况下；我们会结合业界比较成熟的一些设计模式。

4、MVC
§ 视图（View）：用户界面。
§ 控制器（Controller）：业务逻辑
§ 模型（Model）：数据保存
它们的通信方式：
1.View传送指令到Controller
2.Controller完成业务逻辑后，要求 Model改变状态
3.Model将新的数据发送到 View，用户得到反馈.
所有的通信都是单向的。

5、MVP
MVP模式作为一种新型模式，是从经典的模式MVC演变而来，它们的基本思想有相通的地方，将 Controller 改名为Presenter，同时改变了通信方向。
1. 各个部分之间的通信，都是双向的。
2. View 与 Model 不发生联系，都通过 Presenter传递。
3. View 非常薄，不部署任何业务逻辑，称为"被动视图",即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。

6、MVVM：并不是ViewModel，而不是Databinding
MVVM (数据绑定) 最早是微软提出的；模式将 Presenter 改名为ViewModel，基本上与 MVP 模式完全一致。
简单的说，ViewModel就是View与Model的连接器，View与Model通过ViewModel实现双向绑定。
唯一的区别是，它采用双向绑定：View的变动，自动反映在 ViewModel，反之亦然.
谷歌推出了Data binding这个框架，Data Binding是一个 support包，因此与 Android M没什么关系，可以轻松的实现MVVM，Data binding解决了 Android UI 编程中的一个痛点。