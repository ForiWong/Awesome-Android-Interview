1、对于 Android 开发来说，SDK 提供给我们的方案就已经可以写出完整的软件了。我们遵守 SDK 给我们定出的规则，已经能用比较稳定的代码写软件了。由于移动端的软件功能相对简单，所以写简单软件是不需要架构的。
但如果商业项目真的没有架构：
1）不同的人的风格略有不同，一个人写的代码结构，同事或者新人可能会看不懂；
2）当项目越做越大的时候，可能会面临「改不动」的问题：新功能加不进去，软件结构不好调整。
所以虽然移动端项目一般都很小，但是有一个稳定的架构，对商业项目还是有好处的。

2、从MVC到MVP：一般我们在网文博客上，看到mvc的流程图都是像左边这个图那样，即View事件，调用C的逻辑，最终用M拿到数据，最后M去调用V更新。但是实际上，我们用所谓的mvc时，并没有M去调用V,而是M返回数据给C,C再去调用V更新的。其实这个就很像我们讲的MVP,就是了。再说说那个所谓的MVC(其实也是MVP)吧，它的缺点能就是责任划分不明确，xml当成是view，activity当成是Controller，同时能activity还有一部分view的功能，是这里导致了代码的耦合太严。
也就是要解耦了，xml + activity 兼顾了v和C的功能，从中抽取出了Presenter作为指挥者，然后xml和activity一起作为view作用了。也就是得到了我们的MVP。

3、另一种的MVP实现：其实，上面是从xml+activity中解耦出p。想想，还有另一个思路，就是从中activity 抽取出view也是可以的，然后activity作为P，xml + 新的模块作为view。也是可以，当然这个还是MVP,只是不同的实现罢了。

4、用所谓的普遍的mvp架构模式，好处呢？
面向接口IView，复用性好，可扩展性，也就方便测试。

5、mvvm:Model + View + ViewModel。其实就是在MVP的基础上，加了个数据自动绑定的功能。是一个变相的mvp。

6、MVVM 和 MVC、MVP 在定位上的区别
MVC MVP 的架构性质更强：它提供设计规范。

MVVM 是一个框架，像一个库：它提供数据绑定的功能特性。就是一个规范+解决方案。
MVVM 和 Android Jetpack和 MVVM 相关的 Jetpack 组件是 DataBinding，而不是 ViewModel。

7、客户端要架构师有点多余，但是架构思路一定要有。架构就是拆，拆分成一个一个模块，达到解耦、模块化，解耦成模块 + 接口。
