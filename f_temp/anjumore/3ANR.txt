1.ANR全名Application Not Responding, 也就是"应用无响应"。在UI线程没有在规定的时间内，干完要干的事情，就会发生ANR。

2.Input事件超过5s没有被处理完。
Service处理超时，前台20s，后台200s。
BroadcastReceiver处理超时，前台10S，后台60s。
ContentProvider执行超时，比较少见。
造成以上两种情况的首要原因就是在主线程(UI线程)里面做了太多的阻塞耗时操作, 例如文件读写, 数据库读写, 网络查询等等。
线程sleep超时堵塞、CPU满负荷、内存不足（这种情况也会导致OOM）。

3.分析AS异常打印的堆栈信息、或者获取ANR产生的trace文件。

4.如何避免ANR：不要在主线程(UI线程)里面做繁重的操作.

5. ANR的处理
（1）主线程阻塞的
开辟单独的子线程来处理耗时阻塞事务。
（2）CPU满负荷, I/O阻塞的
I/O阻塞一般来说就是文件读写或数据库操作执行在主线程了, 也可以通过开辟子线程的方式异步执行。
（2）内存不够用的
增大VM内存, 使用largeHeap属性, 排查内存泄露(这个在内存优化那篇细说吧)等。

6.使用子线程的方式有哪些：
使用thread；
使用AsyncTask
使用IntentService：Service是运行在主线程的, 然而IntentService是运行在子线程的。
使用HandlerThread：Android中结合Handler和Thread的一种方式。
