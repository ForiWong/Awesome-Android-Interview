1、栈：先进后出FILO
队列：先进先出FIFO
栈的插入和删除操作只允许在表的尾端进行（在栈中成为“栈顶”），满足“FIFO：First In Last Out”；
队列只允许在表尾插入数据元素，在表头删除数据元素,满足“First In First Out”。

2、堆和栈的区别
（1）内存中的堆和栈 
Java把内存划分成两种：一种是栈内存，一种是堆内存。 
在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。 
堆内存用来存放由new创建的对象和数组。在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。 

（2）数据结构中的堆和栈
数据结构方面的堆和栈，这些都是不同的概念。这里的堆实际上指的就是（满足堆性质的）优先队列的一种数据结构，第1个元素有最高的优先权；栈实际上就是满足先进后出的性质的数学或数据结构。  
通常我们所说的堆的数据结构，是指二叉堆。
堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。
二叉堆是一种特殊的堆，二叉堆是完全二元树（二叉树）或者是近似完全二元树（二叉树）。二叉堆有两种：最大堆和最小堆。最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。

3、HashMap的实现原理：数组 + 单向链表（红黑树）实现。
1）利用key的hashCode重新hash计算出当前对象的元素在数组中的下标。
2）存储时，如果出现hash值相同的key，此时有两种情况。1)如果key相同，则覆盖原始值；2)如果key不同（出现冲突），则将当前的key-value放入链表中。
3）获取时，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值。
4）理解了以上过程就不难明白HashMap是如何解决hash冲突的问题，核心就是使用了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。
5）最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。新版本的HashMap对扩容进行优化。

4、ArrayList：Object数组 + 可扩容；
LinkedList：双向链表；

HashMap: Entry数组 + 链表（红黑树） <---- HashSet
LinkedHashMap: HashMap + 双向链表记录插入顺序  <---- LinkedHashSet
Treemap:红黑树(自平衡的二叉搜素树)  <---- TreeSet

线程安全的集合常见的三个：
	Vector：功能同ArrayList，另外是线程安全的；
	HashTable 是线程安全的；HashTable 内部的方法基本都经过synchronized 修饰，HashtableEntry数组 + 链表。
	ConcurrentHashMap是HashMap的线程安全版（自JDK1.5引入），提供比Hashtable更高效的并发性能。采用分离锁，高效。
	
Hashtable 在进行读写操作时会锁住整个Entry数组，这就导致数据越多性能越差。
而ConcurrentHashMap使用分离锁的思路解决并发性能，其将 Entry数组拆分至16个Segment中，以哈希算法决定Entry应该存储在哪个Segment。这样就可以实现在写操作时只对一个Segment 加锁，大幅提升了并发写的性能。

5、Set接口继承Collection，用于存储不含重复元素的集合。
几乎所有的Set实现都是基于同类型Map的，简单地说，Set是阉割版的Map。每一个Set内都有一个同类型的Map实例（CopyOnWriteArraySet除外，它内置的是CopyOnWriteArrayList实例），Set把元素作为key存储在自己的Map实例中，value则是一个空的Object。
Set的常用实现包括 HashSet、TreeSet、ConcurrentSkipListSet等，原理和对应的Map实现完全一致。
