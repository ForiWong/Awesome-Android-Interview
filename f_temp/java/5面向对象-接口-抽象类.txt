1、面向对象：将实现的事物抽取出来，以及事物之间的关系，抽象成类，通过继承，实现来组合。
抽象出来的有属性、功能声明及方法实现。典型的体现就是抽象类。
而，通常会想到的另一个概念接口，是对功能的抽象，只是一种声明，没有实现。且，接口中定义的变量是公开的常量。
所以，可以说接口对比与抽象类是更加的抽象化、更加解耦。

2、面向对象的好处：提高了可维护性，降低了耦合、易复用、易扩展。

3、面向对象有三大特性，封装、继承和多态。
封装：将一类事物的属性和行为抽象成一个类，使其属性私有化，行为公开化，提高了数据的隐秘性的同时，使代码模块化，也提高了安全性。
继承： 提高代码复用性，继承是多态的前提。
多态： 父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，提高了程序的拓展性。

4、方法重载：在同一个类中处理不同数据的多个相同方法名的多态手段。
方法重写：相对继承而言，子类中对父类已经存在的方法进行区别化的修改。

5、多态发生的条件：
1）要有继承
2）要有重写
3）父类引用指向子类对象

6、抽象类和接口的区别 　　
（1）语法层面上的区别
　1.一个类只能继承一个抽象类，而一个类却可以实现多个接口。
　2.抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；且必须给其初值，所以实现类中不能重新定义，也不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。 
　3.抽象类中可以有非抽象方法，接口中则不能有非抽象方法。（现在接口还有默认方法实现了）
　4.接口可以省略abstract 关键字，抽象类不能。
　5.接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；

（2）设计层面上的区别
　1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。
　2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。
