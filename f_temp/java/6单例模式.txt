定义：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
1）一个类只有一个实例这是最基本的
2）它必须自行创建这个实例
3）它必须自行向整个系统提供这个实例

1）懒汉式
在类加载时，不创建实例，因此类加载速度快，但运行时获取对象的速度慢。
A.构造函数定义为私有
B.成员变量为static的，没有初始化
C.公开访问点getInstance：public和synchronized的-----同步保证多线程时的正确性

2)饿汉式
在类加载时就完成了初始化，所以类加载较慢，但获取对象的速度快。
A.私有构造函数
B.静态私有成员--在类加载时已初始化
C.公开访问点getInstance-----不需要同步，因为在类加载时已经初始化完毕，也不需要判断
特点：线程安全的；但是资源效率不高，可能后面没有调用getInstance()。

3.双重检查模式 （DCL）
懒汉式的加强版。
if (instance== null) {  
          synchronized (Singleton.class) {  
          if (instance== null) {  
              instance= new Singleton();  
          }  
         }  
     }  

4. 静态内部类单例模式
第一次加载Singleton类时并不会初始化sInstance，只有第一次调用getInstance方法时虚拟机加载SingletonHolder 并初始化sInstance。 