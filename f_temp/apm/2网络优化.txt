小结:排除网络状态、IP直连、缓存、减小数据量（图片压缩、使用PB替换json）、减少请求次数（合并某些网络请求）、文件下载与上传（断点续传、分片传输）。

1、监听网络状态
状态：网络是否连接 + 网络连接类型。
写一个广播接收器，监听网络变化。
根据网络状态对网络请求进行区别对待，2G 与 WiFi 状态下网络质量肯定是不一样的，那对应的网络策略也应该是不一样的。
例如：在 WiFi 场景下可以进行数据的预取、一些统计的集中上传等；而在 2G 场景下此类操作以及网络请求的次数策略都应该调低。

2、设置网络缓存
缓存接口数据+ 设定有效时间。

3、减小传输数据量
为了能够减小网络传输的数据量，我们需要对传输的数据做压缩的处理，这样能够提高网络操作的性能。
通常来说，网络传输数据量的大小主要由两部分组成：图片与序列化的数据，那么我们需要做的就是减少这两部分的数据传输大小，分下面两个方面来讨论。
1）使用不同分辨率的图片
首先需要做的是减少图片的大小，选择合适的图片保存格式是第一步。
服务器应该支持到为不同的使用场景分别准备多套清晰度不一样的图片，以便在对应的场景下能够获取到最适合自己的图片。

2）压缩序列化数据：可以使用PB减少序列化的数据大小。
其次需要做的是减少序列化数据的大小，不直接使用 JSON 和 XML 格式数据。
JSON 与 XML 为了提高可读性，在文件中加入了大量的符号，空格等等字符，而这些字符对于程序来说是没有任何意义的。我们应该使用 Protocal Buffers，Nano-Proto-Buffers，FlatBuffer 来减小序列化的数据的大小。
Protocol Buffer 是 Google 开发的一种数据交换的格式，它独立于语言，独立于平台。相较于目前常用的 JSON，数据量更小，意味着传输速度也更快。

4、IP直连 与 DNS：可以采用IP直连，省去首次域名解析需要的时间。
DNS解析的失败率占联网失败中很大一种，而且首次域名解析一般需要几百毫秒。针对此，我们可以不用域名，采用 IP 直连省去 DNS 解析过程，节省这部分时间。
另外熟悉阿里云的小伙伴肯定知道 HTTPDNS，HTTPDNS 基于 HTTP 协议的域名解析，替代了基于 DNS 协议向运营商 Local DNS 发起解析请求的传统方式，可以避免 Local DNS 造成的域名劫持和跨网访问问题，解决域名解析异常带来的困扰。

5、文件下载与上传：断点续传、分片传输。
文件、图片等的下载，采用断点续传，不浪费用户之前消耗过的流量。
文件的上传失败率比较高，不仅仅因为大文件，同时带宽、时延、稳定性等因素在此场景下的影响也更加明显。
避免整文件传输，采用分片传输；
根据网络类型以及传输过程中的变化动态的修改分片大小；
每个分片失败重传的机会。

6、请求打包：合并网络请求，减少请求次数。
对于一些接口类如统计，无需实时上报，将统计信息保存在本地，然后根据策略统一上传。这样头信息仅需上传一次，减少了流量也节省了资源。
